buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0"
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

repositories {
    mavenCentral()
}

dependencies {

    compile 'org.hamcrest:hamcrest-junit:2.0.0.0',
            'junit:junit:4.11',
            'com.fasterxml.jackson.core:jackson-databind:2.8.5',
            'org.apache.httpcomponents:httpclient:4.5.1',
            'org.yaml:snakeyaml:1.17'

    testCompile 'org.mockito:mockito-core:2.10.0'
}

task buildContainer(type:Exec) {
    workingDir './src/docker/upstreamBounce/'
    commandLine 'docker', 'build', '-t', 'krogersnowglobe/upstream-bounce-app:latest', '.'
}


test {
    testLogging {
        showStandardStreams = false
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/java')
        }
        resources.srcDir file('src/integration/resources')
    }
}
configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging {
        showStandardStreams = true
    }
}

//integrationTest.dependsOn buildContainer
integrationTest.mustRunAfter test

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

sourceCompatibility = 1.8
archivesBaseName = "snow-globe"
group "com.kroger.oss"
version getVersionName()

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar, javadocJar, sourcesJar
}

task prepSigning << {
    project.ext."signing.password" = System.getenv("SIGNING_PASSWORD")
    project.ext."signing.secretKeyRingFile" = System.getenv("HOME") + "/.gnupg/secring.gpg"
}

signing {
    sign configurations.archives
}

signArchives.dependsOn prepSigning

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                def username = System.getenv("SONATYPE_USER")
                def password = System.getenv("SONATYPE_PASSWORD")
                authentication(userName: username, password: password)
            }

            pom.project {
                name 'snow-globe'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'An integration testing framework for Nginx using Docker.'
                url 'https://github.com/Kroger-Technology/Snow-Globe'

                scm {
                    connection 'https://github.com/Kroger-Technology/Snow-Globe.git'
                    developerConnection 'https://github.com/Kroger-Technology/Snow-Globe.git'
                    url 'https://github.com/Kroger-Technology/Snow-Globe'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'krogerTechnology'
                        name 'Kroger Technology OSS'
                        email 'opensource-sonatype@kroger.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    username=System.getenv("SONATYPE_USER")
    password=System.getenv("SONATYPE_PASSWORD")
    numberOfRetries = 20
    delayBetweenRetriesInMillis = 10000
}

idea {
    project {
        languageLevel = '1.8'
        vcs = 'Git'

        ipr.withXml { xmlFile ->
            // setup Git root
            xmlFile.asNode().component.find { it.@name == 'VcsDirectoryMappings' }.replaceNode {
                component(name: 'VcsDirectoryMappings') {
                    mapping(directory: "", vcs: "")
                    mapping(directory: "\$PROJECT_DIR\$", vcs: 'Git')
                }
            }
        }
    }
}